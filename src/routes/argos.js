const express = require('express');
const router = express.Router();
const argosRequest = require('../base/request');
const { writeError, writeInfo, writeWarning } = require('../modules/logs');
const { isNull } = require('lodash');
const argosUtils = require('../modules/argosUtils');
const http = require('http');
const querystring = require('querystring');


/**
 * @swagger
 * tags:
 *   name: ARGOS Client
 *   description: ARGOS API endpoints
 */

/**
 * @swagger
 * /logs:
 *   post:
 *     summary: Get logs generated by the application
 *     tags: [ARGOS Client]
 *     parameters:
 *       - in: query
 *         name: from
 *         schema:
 *           type: date
 *         required: true
 *         description: From date
 *       - in: query
 *         name: until
 *         schema:
 *           type: date
 *         required: true
 *         description: Until date
  *       - in: query
 *         name: userId
 *         schema:
 *           type: String
 *         required: true
 *         description: User Id who request the information
 *     responses:
 *       200:
 *         description: logs array
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               properties:
 *                 log:
 *                   type: object
 *       500:
 *         description: Internal error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: INTERNAL ERROR 
*/
router.post('/logs', (req, res) => {
  const { requestId } = req.params;
    writeInfo('requestLogs' + requestId);

    res.status(200).json({ 
      
     });
});



/**
 * @swagger
 * /request:
 *   post:
 *     summary: Execute a system connection's request
 *     tags: [ARGOS Client]
 *     parameters:
 *       - in: query
 *         name: requestId
 *         schema:
 *           type: string
 *         required: true
 *         description: Request Id sent by ARGOS Server
 *       - in: query
 *         name: userId
 *         schema:
 *           type: string
 *         required: true
 *         description: User Id who executed the request 
  *       - in: query
 *         name: maxTime
 *         schema:
 *           type: number
 *         required: false
 *         description: Maximum time for connection in minutes 
 *     responses:
 *       201:
 *         description: created connection request
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example:	CREATED
 *       400:
 *         description: bad connection request
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example:	REJECTED
 *                 reason:
 *                   type: string
 *                   example:	Missing required parameter              
 *       500:
 *         description: Internal error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: INTERNAL ERROR 
*/  
router.post('/request', (req, res) => {
  const request = argosUtils.decryptRequest(req.body)
  const {status, reason} = argosUtils.validateRequest(request);
  if (status) {
    argosUtils.executeRequest(request);
    res.status(200).json({ 
      status: 'CREATED',
    });
  } else {
    res.status(400).json({ 
      status: 'REJECTED',
      reason,
    });
  }
});


/**
 * @swagger
 * /requestLogout:
 *   post:
 *     summary: Request execute log out from an active request
 *     tags: [ARGOS Client]
 *     parameters:
 *       - in: query
 *         name: requestId
 *         schema:
 *           type: string
 *         required: true
 *         description: Request Id sent by ARGOS Server
 *       - in: query
 *         name: userId
 *         schema:
 *           type: string
 *         required: true
 *     responses:
 *       200:
 *         description: Logout process was successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: string
 *               properties:
 *                 status:
 *                   type: string
 *                   example: OK
 *       500:
 *         description: Internal error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: INTERNAL ERROR 
*/
router.post('/requestLogout', (req, res) => {
  const request = argosUtils.decryptRequest(req.body)
    writeInfo('requestLogout' + request.requestId);
    let status;
console.log(request);
console.log(argosRequest);

    if (isNull(argosRequest.requestId)) {
      status = 'NO DETECTED';
    } else {
      if (argosRequest.requestId === request.requestId) {
        argosUtils.executeLogout(request);
        
        
        writeWarning('executedLogout');
      } else {
        writeError('executedLogoutError');
      }
    }
    res.status(200).json({ 
      status: status,
     });
});


/**
 * @swagger
 * /status:
 *   get:
 *     summary: Check if ARGOS client is active on the system
 *     tags: [ARGOS Client]
 *     parameters:
 *       - in: path
 *         name: requestId
 *         schema:
 *           type: string
 *         required: true
 *         description: Request Id sent by ARGOS
 *     responses:
 *       200:
 *         description: status request
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example:	CREATED, READY, ERROR, NO DETECTED
 *       500:
 *         description: Internal error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: INTERNAL ERROR 
*/
router.get('/status/:requestId', (req, res) => {
  const { requestId } = req.params;
  writeInfo('requestedInformation', {requestId});

  const status = argosRequest.requestId == requestId ? argosRequest.requestStatus : 'NO DETECTED';
  res.status(200).json({ 
      requestId: requestId,
      status: status,
     });
});  

module.exports = router;